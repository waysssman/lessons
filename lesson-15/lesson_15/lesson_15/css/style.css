/* Підключення шрифтів */
@import url("fonts.css");

/* Скидання стилів */
@import url("reset.css");

/* Основні стилі */
body {
	background-color: #333;
	font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
	color: #fff;
}
.wrapper {
	min-height: 100%;
	overflow: clip;

	display: flex;
	flex-direction: column;
}
.wrapper > main {
	flex-grow: 1;
}

.header {
	background-color: #77608d;
	padding: 15px;
	text-align: center;
}
.footer {
	background-color: #7a956b;
	padding: 15px;
	text-align: center;
}

/*
Flexbox - це цілий модуль,
що містить у собі набір властивостей 
та їх значень як для батьківського 
об'єкту (flex-контейнера), так і для 
його дочірніх елементів (flex-елементів). 

Основною перевагою гнучкої FLEX розмітки 
є можливість змінювати ширину/висоту простір 
навколо та порядок flex-елементів, для того, 
щоб найкращим чином заповнити доступний простір 
flex-контейнера та полегшувати адаптивність
*/

/* FLEX-контейнер */
.block {
	background-color: #794f45;
	border: 5px solid red;
	/* Властивості FLEX-контейнера */

	/* 
	display: flex/inline-flex;
	1) Визначає flex-контейнер,
	блочний або блочний-рядковий (залежить від значення). 
	2) Перетворює всі свої беспосередні дочірні 
	елементи у flex-елементи.
	*/
	display: flex;

	/*
	flex-wrap
	Визначає, чи зможуть flex-елементи переміщатися 
	на наступні рядки, коли перестають поміщатися 
	всередині flex-контейнера.

	nowrap - (за замовченням) Flex-елементи не можуть 
	переміщатися на наступні рядки flex-контейнера.
	wrap - Flex-елементи зможуть переміщатися на 
	наступні рядки flex-контейнера.
	wrap-reverse - Flex-елементи зможуть переміщатися 
	на наступні рядки flex-контейнера, 
	але у зворотному порядку.
	*/
	flex-wrap: wrap;

	/*
	justify-content

	Визначає вирівнювання вздовж основної осі 
	(напрямок залежить від значення властивості flex-direction).
	flex-start - Значення за промовчанням (не потрібно вказувати). 
	Flex-елементи притискаються до початку осі.
	flex-end - Flex-елементи притискаються вкінець осі.
	center - Flex-елементи розташовуються в центрі основної осі.

	space-between - Flex-елементи розміщуються 
	поступово по основній осі. 
	Перший елемент знаходиться на початку осі,
	останній елемент знаходиться наприкінці осі.
	Між елементами постійно однаковий простір

	space-around - Flex-елементи розташовуються рівномірно 
	по основній осі. До кожного flex-елементу 
	додається простір ліворуч і праворуч.

	space-evenly - Flex-елементи розташовуються рівномірно по 
	основній осі з однаковим простором навколо них.
	*/
	justify-content: flex-start;

	/*
	align-items
	Визначає вирівнювання вздовж поперечної осі 
	(напрямок залежить від значення властивості flex-direction).
	stretch - Значення за промовчанням (не потрібно вказувати). 
	Flex-елементи розтягуються весь розмір поперечної осі 
	flex-контейнера.
	flex-start - Flex-елементи притискаються до 
	початку поперечної осі.
	flex-end - Flex-елементи притискаються вкінець поперечної осі.
	center - Flex-елементи по центру

	*/
	align-items: stretch;

	/*
	flex-direction
	Встановлює основну вісь,
	таким чином визначає напрямок flex-елементів,
	розташованих у flex-контейнері.
	row - Значення за замовчуванням (не потрібно вказувати). 
	Основна вісь горизонтальна. Всі flex-елементи 
	розташуються ліворуч по горизонталі.
	row-reverse - змінює напрям горизонтального вектору
	column - змінює головну вісь на вертикальну (зверху вниз)
	другорядна зліва на право.
	column-reverse - змінює головну вісь на вертикальну (знизу вверх)
	другорядна зліва на право.
	*/
	/* flex-direction: column; */

	/* 
	gap
	Проміжок між FLEX-елементами
	Не залежить від flex-direction
	*/

	/* Загальний (колонками та рядками) */
	/* !!! Погано працює з відсотковим basis */
	gap: 10px;

	/* Між колонками */
	/* column-gap: 15px; */
	/* Між рядками */
	/* row-gap: 30px; */
}

/* 
Властивості FLEX – елементів. 
Застосовуються для flex-елемента,
дочірнього об'єкта flex-контейнера
*/

/*
align-self
Перевизначає для конкретного flex-елемента 
вирівнювання вздовж поперечної осі 
(напрямок залежить від значення якості flex-direction).
*/

/*
flex-grow - 0 заборонено. 1 дозволено. (за замовченням - 0) 
Визначає можливість елемента збільшуватись (більше ніж flex-basis)
у розмірі, при необхідності заповнюючи весь 
flex-контейнер.

flex-shrink - 0 заборонено. 1 дозволено. (за замовченням - 1)
Визначає можливість елемента зменшуватись у розмірі 
(меньше ніж flex-basis)

flex-basis - Визначає базовий розмір елемента 
за замовченням, до розподілу простору, що залишився. 
Значення можуть бути у відсотках пікселях тощо.
auto (за замовченням) - розмір по контенту
*/

/*
order
Керує порядком,
в якому розташовуються flex-елементи 
всередині flex-контейнера.
При зміні порядку хоча б для одного flex-елементу,
варто прописувати order усім flex-елементам,
навіть тим які лишаються на своєму місці.
*/

/* FLEX-елемент */
.block__item {
	font-size: 15px;
	font-weight: 700;
	background-color: #7a956b;
	padding: 10px;
	text-align: center;
	border: 5px solid #77608d;

	/* 
	FLEX-елемент може бути 
	одночасно і FLEX-контейнером */
	/* 
	display: flex;
	justify-content: center;
	align-items: center;
	 */
}
.block__item:nth-child(1) {
	/* align-self: flex-start; */
	/* order: 4; */
}
.block__item:nth-child(2) {
	/* order: 5; */
	/* 
	(за замовченням)
	flex-grow: 0;
	flex-shrink: 1;
	flex-basis: auto;
	*/
	/* Універсальний запис */
	/* flex: flex-grow flex-shrink flex-basis */
	/* flex: 0 1 auto;  (за замовченням) */
}
.block__item:nth-child(3) {
	/* order: 2; */
}
.block__item:nth-child(4) {
	/* order: 1; */
}
.block__item:nth-child(5) {
	/* order: 3; */
}

/* ========================================= */

/* Відсотковий basis та абсолютний gap */

.container {
	max-width: 800px;
	/* overflow: hidden; */
	margin: 0 auto;
	/* background-color: #666; */
}

/* FLEX-контейнер */
.columns-gap {
	/* background-color: #794f45; */
	display: flex;
	flex-wrap: wrap;
	margin: 0px -10px -20px -10px;
}
/* FLEX-елемент */
.columns-gap__column {
	padding: 0px 10px 20px 10px;
	flex-basis: 33.333%;
	flex-grow: 1;
	flex-shrink: 1;
	/* background-color: #77608d; */
}
/* Контент */
.columns-gap__item {
	padding: 15px;
	background-color: #7a956b;
}

/* Картки товарів */

.page__container {
	max-width: 1270px;
	margin: 0 auto;
	padding: 0px 15px;
}

.categories {
	padding: 50px 0px;
	display: flex;
	flex-wrap: wrap;
	margin: 0 -25px;
}
.categories__column{
	padding: 0 25px;
	flex-grow: 0;
	flex-shrink: 0;
	flex-basis: 25%;
	margin-bottom: 50px;
}

.item-product {
	display: flex;
	flex-direction: column;
	min-height: 100%;
}
.item-product__img {
	overflow: hidden;
	border-radius: 10px;
}
.item-product__img img {
	max-width: 100%;
}

.item-product__img:not(:last-child) {
	margin-bottom: 15px;
}

.item-product__body {
	display: flex;
	flex-grow: 1;
}
.item-product__content {
	flex-grow: 1;
	display: flex;
	flex-direction: column;
}
.item-product__title {
	flex-grow: 1;
}
.item-product__title:not(:last-child) {
	margin-bottom: 10px;
}
.item-product__link {
	align-self: flex-start;
	min-height: 45px;
	flex-grow: 0;
	flex-shrink: 0;
	flex-basis: 18px;
	background: url("../img/arrow.svg") center no-repeat;
}

.link {
	display: inline-flex;
	gap: 10px;
}
.link::before {
	content: "";
	flex-basis: 10px;

	width: 10px;
	height: 10px;
	background-color: red;
}
